# -*- coding: utf-8 -*-
"""Maize Train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ba96LW9BSe-TmaTRcOHM2lsfJmiA4RY4
"""

import pandas as pd

# Load the datasets
prices_weather_production_df = pd.read_csv('/content/Food_Prices_Kenya.csv')
counties_regions_df = pd.read_csv('/content/Kenyan_Counties_with_Regions.csv')

# Clean the Food_Prices_Kenya dataset
prices_weather_production_df = prices_weather_production_df.loc[:, ~prices_weather_production_df.columns.str.contains('^Unnamed')]
prices_weather_production_df = prices_weather_production_df.dropna()

# Convert date-related columns to datetime format
prices_weather_production_df['Date'] = pd.to_datetime(prices_weather_production_df['Date'], errors='coerce')
prices_weather_production_df['Year'] = prices_weather_production_df['Date'].dt.year
prices_weather_production_df['Month'] = prices_weather_production_df['Date'].dt.month

# Replace commas in numeric columns and convert to numeric type
for col in ['Price', 'Usdprice', 'Amount Produced', 'Annual Rainfall', 'Annual Temperature']:
    # Removing this line as it is no longer needed after converting to numeric
    # prices_weather_production_df[col] = prices_weather_production_df[col].str.replace(',', '', regex=True)
    prices_weather_production_df[col] = pd.to_numeric(prices_weather_production_df[col], errors='coerce')

# Drop rows with NaN values in these columns
prices_weather_production_df = prices_weather_production_df.dropna(subset=['Price', 'Usdprice', 'Amount Produced', 'Annual Rainfall', 'Annual Temperature'])

# Convert to float (This step might be redundant if pd.to_numeric already converted them)
for col in ['Price', 'Usdprice', 'Amount Produced', 'Annual Rainfall', 'Annual Temperature']:
    prices_weather_production_df[col] = prices_weather_production_df[col].astype(float)

# Merge the datasets
merged_df = pd.merge(prices_weather_production_df, counties_regions_df, left_on='Regions', right_on='Region', how='left')
merged_df = merged_df.drop(columns=['Region'])

# Save the merged dataset
merged_df.to_csv('/content/merged_data.csv', index=False)

# Merge the datasets
merged_df = pd.merge(prices_weather_production_df, counties_regions_df, left_on='Regions', right_on='Region', how='left')
merged_df = merged_df.drop(columns=['Region'])

# Display the merged data
print(merged_df.head())

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split

# Load the merged dataset
merged_df = pd.read_csv('/content/merged_data.csv')

# Define the feature set and target variable for price prediction
X_price = merged_df[['Year', 'Month', 'Amount Produced', 'Annual Rainfall', 'Annual Temperature']]
y_price = merged_df['Price']

# Define the feature set and target variables for weather prediction
X_weather = merged_df[['Year', 'Month']]
y_rainfall = merged_df['Annual Rainfall']
y_temperature = merged_df['Annual Temperature']

# Split the data into training and testing sets
X_train_price, X_test_price, y_train_price, y_test_price = train_test_split(X_price, y_price, test_size=0.2, random_state=42)
X_train_weather, X_test_weather, y_train_rainfall, y_test_rainfall, y_train_temperature, y_test_temperature = train_test_split(
    X_weather, y_rainfall, y_temperature, test_size=0.2, random_state=42)

# ANN model for maize price prediction
def build_price_model():
    model = Sequential()
    model.add(Dense(128, input_dim=X_train_price.shape[1], activation='relu'))
    model.add(Dense(64, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1))  # Output layer for regression
    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mean_absolute_error'])
    return model

# ANN model for weather prediction
def build_weather_model():
    model = Sequential()
    model.add(Dense(128, input_dim=X_train_weather.shape[1], activation='relu'))
    model.add(Dense(64, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(2))  # Predicting both rainfall and temperature
    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mean_absolute_error'])
    return model

# Build and train the models
price_model = build_price_model()
price_model.fit(X_train_price, y_train_price, epochs=100, batch_size=10, validation_split=0.2)
price_model.save('models/price_model.h5')

weather_model = build_weather_model()
weather_model.fit(X_train_weather, [y_train_rainfall, y_train_temperature], epochs=100, batch_size=10, validation_split=0.2)
weather_model.save('models/weather_model.h5')